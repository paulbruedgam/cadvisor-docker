name: Container

on:
  schedule:
    - cron: '0 0 * * 6'  # At 00:00 on Saturday

  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - '**' # All tags kick off a new container build Save history ad 5.0.x etc

  # Run tests for any PRs.
  pull_request:

env:
  BUILD_PLATFORM: |
    linux/arm/v6
    linux/arm/v7
    linux/arm64
    linux/amd64
  CADVISOR_RELEASE: 'v0.44.1'
  # Enable Docker Buildkit
  DOCKER_BUILDKIT: 1
  IMAGE_NAME: cadvisor

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile

  prepare:
    runs-on: ubuntu-latest
    needs: lint
    # Map a step output to a job output
    outputs:
      DOCKER_REPOSITORY: ${{ steps.tag_image.outputs.DOCKER_REPOSITORY }}
      DOCKER_TAG: ${{ steps.tag_image.outputs.DOCKER_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Tag Image
        id: tag_image
        run: |
          DOCKER_REPOSITORY=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          DOCKER_REPOSITORY=$(echo $DOCKER_REPOSITORY | tr '[A-Z]' '[a-z]')

          DOCKER_TAG=${{ github.ref_name }}

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "master" ] && DOCKER_TAG=latest
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          echo DOCKER_REPOSITORY=$DOCKER_REPOSITORY
          echo DOCKER_TAG=$DOCKER_TAG
          echo '::set-output name=DOCKER_REPOSITORY::'$DOCKER_REPOSITORY
          echo '::set-output name=DOCKER_TAG::'$DOCKER_TAG

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_and_push:
    runs-on: ubuntu-latest
    needs: [prepare]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          build-args: |
            CADVISOR_RELEASE=${{ env.CADVISOR_RELEASE }}
            REPO=${{ github.repository }}
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile
          platforms: ${{ env.BUILD_PLATFORM }}
          push: true
          tags: |
            ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ needs.prepare.outputs.DOCKER_TAG }}
            ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ github.sha }}

      - name: Inspect image
        if: success()
        run: |
          docker buildx imagetools inspect ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ needs.prepare.outputs.DOCKER_TAG }}

  test:
    runs-on: ubuntu-latest
    needs: [prepare, build_and_push]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ github.sha }}"
          format: 'template' 
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always() 
        with:
          sarif_file: 'trivy-results.sarif'
